#!/usr/bin/bash
# Container build script for Faun Linux & Windows SDKs.

if [ ! -s project.tar.gz ]; then
    copr -a
fi

TIME=$(date +%H%M%S)
SCRIPT=build-$TIME
ID=${SCRIPT}
HDIR=/tmp
CDIR=/tmp
ARC_DIR=/tmp/faun_sdk-0.1.0

clean_dir () {
    if [ -d "$1" ]; then rm -rf "$1"/*; else mkdir -p "$1"; fi
}

container_build () {
    clean_dir ${ARC_DIR}
    mkdir -p ${ARC_DIR}/include ${ARC_DIR}/lib

    podman run -d -it --name=$ID $1 /bin/bash || exit
    podman cp project.tar.gz $ID:$CDIR
    podman cp $HDIR/${SCRIPT} $ID:$CDIR/${SCRIPT}
    podman exec -it -u build $ID /bin/bash $CDIR/${SCRIPT}
}

case $1 in
windows)
    echo '
  mkdir faun
  cd faun
  tar xf /tmp/project.tar.gz
  copr -t mingw static:true
' >$HDIR/${SCRIPT}

    #LIB_NAME=libfaun.dll
    #ARC_NAME=faun-x86_64-w64-mingw32-dynamic-0.1.0.zip
    LIB_NAME=libfaun.a
    ARC_NAME=faun-x86_64-w64-mingw32-static-0.1.0.zip

    container_build xu4/f33-mingw
    podman cp $ID:/home/build/faun/${LIB_NAME} ${ARC_DIR}/lib || exit
    #podman cp $ID:/home/build/faun/faun_test.exe ${ARC_DIR}

    # Build archive.
    if [ "$2" != "-b" ]; then
        cp faun.h ${ARC_DIR}/include
        FN=`readlink -f vorbis-dll.tar.bz2`
        tar xf $FN -C ${ARC_DIR}
       #cd ${ARC_DIR%/*}; zip -r ${ARC_NAME} ${ARC_DIR##*/}
        cd ${ARC_DIR}; zip -r ../${ARC_NAME} *
    fi
    ;;

linux)
    echo '
  mkdir faun
  cd faun
  tar xf /tmp/project.tar.gz
  copr static:true
' >$HDIR/${SCRIPT}

    LIB_NAME=libfaun.a
    ARC_NAME=faun-x86_64-static-0.1.0.tar.bz2

    container_build xu4/f33-gcc
    podman cp $ID:/home/build/faun/${LIB_NAME} ${ARC_DIR}/lib || exit

    # Build archive.
    if [ "$2" != "-b" ]; then
        cp faun.h ${ARC_DIR}/include
        tar cjf /tmp/${ARC_NAME} -C ${ARC_DIR%/*} ${ARC_DIR##*/}
    fi
    ;;

*)
    echo "Usage: $0 {linux|windows} [-b]"
    echo -e '\nOptions:'
    echo '  -b    Build binary only; do not create archive.'
    exit 1
esac

echo "$SCRIPT done!"
podman stop $ID
